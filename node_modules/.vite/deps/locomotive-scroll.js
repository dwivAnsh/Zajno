// node_modules/lenis/dist/lenis.mjs
function clamp(t2, i2, e2) {
  return Math.max(t2, Math.min(i2, e2));
}
var Animate = class {
  constructor() {
    this.isRunning = false, this.value = 0, this.from = 0, this.to = 0, this.duration = 0, this.currentTime = 0;
  }
  advance(t2) {
    var i2;
    if (!this.isRunning)
      return;
    let e2 = false;
    if (this.duration && this.easing) {
      this.currentTime += t2;
      const i3 = clamp(0, this.currentTime / this.duration, 1);
      e2 = i3 >= 1;
      const s2 = e2 ? 1 : this.easing(i3);
      this.value = this.from + (this.to - this.from) * s2;
    } else
      this.lerp ? (this.value = function damp(t3, i3, e3, s2) {
        return function lerp(t4, i4, e4) {
          return (1 - e4) * t4 + e4 * i4;
        }(t3, i3, 1 - Math.exp(-e3 * s2));
      }(this.value, this.to, 60 * this.lerp, t2), Math.round(this.value) === this.to && (this.value = this.to, e2 = true)) : (this.value = this.to, e2 = true);
    e2 && this.stop(), null === (i2 = this.onUpdate) || void 0 === i2 || i2.call(this, this.value, e2);
  }
  stop() {
    this.isRunning = false;
  }
  fromTo(t2, i2, { lerp: e2, duration: s2, easing: o2, onStart: n2, onUpdate: l2 }) {
    this.from = this.value = t2, this.to = i2, this.lerp = e2, this.duration = s2, this.easing = o2, this.currentTime = 0, this.isRunning = true, null == n2 || n2(), this.onUpdate = l2;
  }
};
var Dimensions = class {
  constructor({ wrapper: t2, content: i2, autoResize: e2 = true, debounce: s2 = 250 } = {}) {
    this.width = 0, this.height = 0, this.scrollWidth = 0, this.scrollHeight = 0, this.resize = () => {
      this.onWrapperResize(), this.onContentResize();
    }, this.onWrapperResize = () => {
      this.wrapper === window ? (this.width = window.innerWidth, this.height = window.innerHeight) : this.wrapper instanceof HTMLElement && (this.width = this.wrapper.clientWidth, this.height = this.wrapper.clientHeight);
    }, this.onContentResize = () => {
      this.wrapper === window ? (this.scrollHeight = this.content.scrollHeight, this.scrollWidth = this.content.scrollWidth) : this.wrapper instanceof HTMLElement && (this.scrollHeight = this.wrapper.scrollHeight, this.scrollWidth = this.wrapper.scrollWidth);
    }, this.wrapper = t2, this.content = i2, e2 && (this.debouncedResize = function debounce(t3, i3) {
      let e3;
      return function() {
        let s3 = arguments, o2 = this;
        clearTimeout(e3), e3 = setTimeout(function() {
          t3.apply(o2, s3);
        }, i3);
      };
    }(this.resize, s2), this.wrapper === window ? window.addEventListener("resize", this.debouncedResize, false) : (this.wrapperResizeObserver = new ResizeObserver(this.debouncedResize), this.wrapperResizeObserver.observe(this.wrapper)), this.contentResizeObserver = new ResizeObserver(this.debouncedResize), this.contentResizeObserver.observe(this.content)), this.resize();
  }
  destroy() {
    var t2, i2;
    null === (t2 = this.wrapperResizeObserver) || void 0 === t2 || t2.disconnect(), null === (i2 = this.contentResizeObserver) || void 0 === i2 || i2.disconnect(), window.removeEventListener("resize", this.debouncedResize, false);
  }
  get limit() {
    return { x: this.scrollWidth - this.width, y: this.scrollHeight - this.height };
  }
};
var Emitter = class {
  constructor() {
    this.events = {};
  }
  emit(t2, ...i2) {
    let e2 = this.events[t2] || [];
    for (let t3 = 0, s2 = e2.length; t3 < s2; t3++)
      e2[t3](...i2);
  }
  on(t2, i2) {
    var e2;
    return (null === (e2 = this.events[t2]) || void 0 === e2 ? void 0 : e2.push(i2)) || (this.events[t2] = [i2]), () => {
      var e3;
      this.events[t2] = null === (e3 = this.events[t2]) || void 0 === e3 ? void 0 : e3.filter((t3) => i2 !== t3);
    };
  }
  off(t2, i2) {
    var e2;
    this.events[t2] = null === (e2 = this.events[t2]) || void 0 === e2 ? void 0 : e2.filter((t3) => i2 !== t3);
  }
  destroy() {
    this.events = {};
  }
};
var t = 100 / 6;
var VirtualScroll = class {
  constructor(i2, { wheelMultiplier: e2 = 1, touchMultiplier: s2 = 1 }) {
    this.lastDelta = { x: 0, y: 0 }, this.windowWidth = 0, this.windowHeight = 0, this.onTouchStart = (t2) => {
      const { clientX: i3, clientY: e3 } = t2.targetTouches ? t2.targetTouches[0] : t2;
      this.touchStart.x = i3, this.touchStart.y = e3, this.lastDelta = { x: 0, y: 0 }, this.emitter.emit("scroll", { deltaX: 0, deltaY: 0, event: t2 });
    }, this.onTouchMove = (t2) => {
      var i3, e3, s3, o2;
      const { clientX: n2, clientY: l2 } = t2.targetTouches ? t2.targetTouches[0] : t2, r2 = -(n2 - (null !== (e3 = null === (i3 = this.touchStart) || void 0 === i3 ? void 0 : i3.x) && void 0 !== e3 ? e3 : 0)) * this.touchMultiplier, h2 = -(l2 - (null !== (o2 = null === (s3 = this.touchStart) || void 0 === s3 ? void 0 : s3.y) && void 0 !== o2 ? o2 : 0)) * this.touchMultiplier;
      this.touchStart.x = n2, this.touchStart.y = l2, this.lastDelta = { x: r2, y: h2 }, this.emitter.emit("scroll", { deltaX: r2, deltaY: h2, event: t2 });
    }, this.onTouchEnd = (t2) => {
      this.emitter.emit("scroll", { deltaX: this.lastDelta.x, deltaY: this.lastDelta.y, event: t2 });
    }, this.onWheel = (i3) => {
      let { deltaX: e3, deltaY: s3, deltaMode: o2 } = i3;
      e3 *= 1 === o2 ? t : 2 === o2 ? this.windowWidth : 1, s3 *= 1 === o2 ? t : 2 === o2 ? this.windowHeight : 1, e3 *= this.wheelMultiplier, s3 *= this.wheelMultiplier, this.emitter.emit("scroll", { deltaX: e3, deltaY: s3, event: i3 });
    }, this.onWindowResize = () => {
      this.windowWidth = window.innerWidth, this.windowHeight = window.innerHeight;
    }, this.element = i2, this.wheelMultiplier = e2, this.touchMultiplier = s2, this.touchStart = { x: null, y: null }, this.emitter = new Emitter(), window.addEventListener("resize", this.onWindowResize, false), this.onWindowResize(), this.element.addEventListener("wheel", this.onWheel, { passive: false }), this.element.addEventListener("touchstart", this.onTouchStart, { passive: false }), this.element.addEventListener("touchmove", this.onTouchMove, { passive: false }), this.element.addEventListener("touchend", this.onTouchEnd, { passive: false });
  }
  on(t2, i2) {
    return this.emitter.on(t2, i2);
  }
  destroy() {
    this.emitter.destroy(), window.removeEventListener("resize", this.onWindowResize, false), this.element.removeEventListener("wheel", this.onWheel), this.element.removeEventListener("touchstart", this.onTouchStart), this.element.removeEventListener("touchmove", this.onTouchMove), this.element.removeEventListener("touchend", this.onTouchEnd);
  }
};
var Lenis = class {
  constructor({ wrapper: t2 = window, content: i2 = document.documentElement, wheelEventsTarget: e2 = t2, eventsTarget: s2 = e2, smoothWheel: o2 = true, syncTouch: n2 = false, syncTouchLerp: l2 = 0.075, touchInertiaMultiplier: r2 = 35, duration: h2, easing: a2 = (t3) => Math.min(1, 1.001 - Math.pow(2, -10 * t3)), lerp: c2 = 0.1, infinite: d = false, orientation: u2 = "vertical", gestureOrientation: p = "vertical", touchMultiplier: m = 1, wheelMultiplier: v = 1, autoResize: g = true, prevent: w, virtualScroll: S, __experimental__naiveDimensions: f = false } = {}) {
    this.__isScrolling = false, this.__isStopped = false, this.__isLocked = false, this.userData = {}, this.lastVelocity = 0, this.velocity = 0, this.direction = 0, this.onPointerDown = (t3) => {
      1 === t3.button && this.reset();
    }, this.onVirtualScroll = (t3) => {
      if ("function" == typeof this.options.virtualScroll && false === this.options.virtualScroll(t3))
        return;
      const { deltaX: i3, deltaY: e3, event: s3 } = t3;
      if (this.emitter.emit("virtual-scroll", { deltaX: i3, deltaY: e3, event: s3 }), s3.ctrlKey)
        return;
      const o3 = s3.type.includes("touch"), n3 = s3.type.includes("wheel");
      this.isTouching = "touchstart" === s3.type || "touchmove" === s3.type;
      if (this.options.syncTouch && o3 && "touchstart" === s3.type && !this.isStopped && !this.isLocked)
        return void this.reset();
      const l3 = 0 === i3 && 0 === e3, r3 = "vertical" === this.options.gestureOrientation && 0 === e3 || "horizontal" === this.options.gestureOrientation && 0 === i3;
      if (l3 || r3)
        return;
      let h3 = s3.composedPath();
      h3 = h3.slice(0, h3.indexOf(this.rootElement));
      const a3 = this.options.prevent;
      if (h3.find((t4) => {
        var i4, e4, s4, l4, r4;
        return t4 instanceof Element && ("function" == typeof a3 && (null == a3 ? void 0 : a3(t4)) || (null === (i4 = t4.hasAttribute) || void 0 === i4 ? void 0 : i4.call(t4, "data-lenis-prevent")) || o3 && (null === (e4 = t4.hasAttribute) || void 0 === e4 ? void 0 : e4.call(t4, "data-lenis-prevent-touch")) || n3 && (null === (s4 = t4.hasAttribute) || void 0 === s4 ? void 0 : s4.call(t4, "data-lenis-prevent-wheel")) || (null === (l4 = t4.classList) || void 0 === l4 ? void 0 : l4.contains("lenis")) && !(null === (r4 = t4.classList) || void 0 === r4 ? void 0 : r4.contains("lenis-stopped")));
      }))
        return;
      if (this.isStopped || this.isLocked)
        return void s3.preventDefault();
      if (!(this.options.syncTouch && o3 || this.options.smoothWheel && n3))
        return this.isScrolling = "native", void this.animate.stop();
      s3.preventDefault();
      let c3 = e3;
      "both" === this.options.gestureOrientation ? c3 = Math.abs(e3) > Math.abs(i3) ? e3 : i3 : "horizontal" === this.options.gestureOrientation && (c3 = i3);
      const d2 = o3 && this.options.syncTouch, u3 = o3 && "touchend" === s3.type && Math.abs(c3) > 5;
      u3 && (c3 = this.velocity * this.options.touchInertiaMultiplier), this.scrollTo(this.targetScroll + c3, Object.assign({ programmatic: false }, d2 ? { lerp: u3 ? this.options.syncTouchLerp : 1 } : { lerp: this.options.lerp, duration: this.options.duration, easing: this.options.easing }));
    }, this.onNativeScroll = () => {
      if (clearTimeout(this.__resetVelocityTimeout), delete this.__resetVelocityTimeout, this.__preventNextNativeScrollEvent)
        delete this.__preventNextNativeScrollEvent;
      else if (false === this.isScrolling || "native" === this.isScrolling) {
        const t3 = this.animatedScroll;
        this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity, this.velocity = this.animatedScroll - t3, this.direction = Math.sign(this.animatedScroll - t3), this.isScrolling = "native", this.emit(), 0 !== this.velocity && (this.__resetVelocityTimeout = setTimeout(() => {
          this.lastVelocity = this.velocity, this.velocity = 0, this.isScrolling = false, this.emit();
        }, 400));
      }
    }, window.lenisVersion = "1.1.9", t2 && t2 !== document.documentElement && t2 !== document.body || (t2 = window), this.options = { wrapper: t2, content: i2, wheelEventsTarget: e2, eventsTarget: s2, smoothWheel: o2, syncTouch: n2, syncTouchLerp: l2, touchInertiaMultiplier: r2, duration: h2, easing: a2, lerp: c2, infinite: d, gestureOrientation: p, orientation: u2, touchMultiplier: m, wheelMultiplier: v, autoResize: g, prevent: w, virtualScroll: S, __experimental__naiveDimensions: f }, this.animate = new Animate(), this.emitter = new Emitter(), this.dimensions = new Dimensions({ wrapper: t2, content: i2, autoResize: g }), this.updateClassName(), this.userData = {}, this.time = 0, this.velocity = this.lastVelocity = 0, this.isLocked = false, this.isStopped = false, this.isScrolling = false, this.targetScroll = this.animatedScroll = this.actualScroll, this.options.wrapper.addEventListener("scroll", this.onNativeScroll, false), this.options.wrapper.addEventListener("pointerdown", this.onPointerDown, false), this.virtualScroll = new VirtualScroll(s2, { touchMultiplier: m, wheelMultiplier: v }), this.virtualScroll.on("scroll", this.onVirtualScroll);
  }
  destroy() {
    this.emitter.destroy(), this.options.wrapper.removeEventListener("scroll", this.onNativeScroll, false), this.options.wrapper.removeEventListener("pointerdown", this.onPointerDown, false), this.virtualScroll.destroy(), this.dimensions.destroy(), this.cleanUpClassName();
  }
  on(t2, i2) {
    return this.emitter.on(t2, i2);
  }
  off(t2, i2) {
    return this.emitter.off(t2, i2);
  }
  setScroll(t2) {
    this.isHorizontal ? this.rootElement.scrollLeft = t2 : this.rootElement.scrollTop = t2;
  }
  resize() {
    this.dimensions.resize();
  }
  emit() {
    this.emitter.emit("scroll", this);
  }
  reset() {
    this.isLocked = false, this.isScrolling = false, this.animatedScroll = this.targetScroll = this.actualScroll, this.lastVelocity = this.velocity = 0, this.animate.stop();
  }
  start() {
    this.isStopped && (this.isStopped = false, this.reset());
  }
  stop() {
    this.isStopped || (this.isStopped = true, this.animate.stop(), this.reset());
  }
  raf(t2) {
    const i2 = t2 - (this.time || t2);
    this.time = t2, this.animate.advance(1e-3 * i2);
  }
  scrollTo(t2, { offset: i2 = 0, immediate: e2 = false, lock: s2 = false, duration: o2 = this.options.duration, easing: n2 = this.options.easing, lerp: l2 = this.options.lerp, onStart: r2, onComplete: h2, force: a2 = false, programmatic: c2 = true, userData: d = {} } = {}) {
    if (!this.isStopped && !this.isLocked || a2) {
      if ("string" == typeof t2 && ["top", "left", "start"].includes(t2))
        t2 = 0;
      else if ("string" == typeof t2 && ["bottom", "right", "end"].includes(t2))
        t2 = this.limit;
      else {
        let e3;
        if ("string" == typeof t2 ? e3 = document.querySelector(t2) : t2 instanceof HTMLElement && (null == t2 ? void 0 : t2.nodeType) && (e3 = t2), e3) {
          if (this.options.wrapper !== window) {
            const t3 = this.rootElement.getBoundingClientRect();
            i2 -= this.isHorizontal ? t3.left : t3.top;
          }
          const s3 = e3.getBoundingClientRect();
          t2 = (this.isHorizontal ? s3.left : s3.top) + this.animatedScroll;
        }
      }
      if ("number" == typeof t2 && (t2 += i2, t2 = Math.round(t2), this.options.infinite ? c2 && (this.targetScroll = this.animatedScroll = this.scroll) : t2 = clamp(0, t2, this.limit), t2 !== this.targetScroll)) {
        if (this.userData = d, e2)
          return this.animatedScroll = this.targetScroll = t2, this.setScroll(this.scroll), this.reset(), this.preventNextNativeScrollEvent(), this.emit(), null == h2 || h2(this), void (this.userData = {});
        c2 || (this.targetScroll = t2), this.animate.fromTo(this.animatedScroll, t2, { duration: o2, easing: n2, lerp: l2, onStart: () => {
          s2 && (this.isLocked = true), this.isScrolling = "smooth", null == r2 || r2(this);
        }, onUpdate: (t3, i3) => {
          this.isScrolling = "smooth", this.lastVelocity = this.velocity, this.velocity = t3 - this.animatedScroll, this.direction = Math.sign(this.velocity), this.animatedScroll = t3, this.setScroll(this.scroll), c2 && (this.targetScroll = t3), i3 || this.emit(), i3 && (this.reset(), this.emit(), null == h2 || h2(this), this.userData = {}, this.preventNextNativeScrollEvent());
        } });
      }
    }
  }
  preventNextNativeScrollEvent() {
    this.__preventNextNativeScrollEvent = true, requestAnimationFrame(() => {
      delete this.__preventNextNativeScrollEvent;
    });
  }
  get rootElement() {
    return this.options.wrapper === window ? document.documentElement : this.options.wrapper;
  }
  get limit() {
    return this.options.__experimental__naiveDimensions ? this.isHorizontal ? this.rootElement.scrollWidth - this.rootElement.clientWidth : this.rootElement.scrollHeight - this.rootElement.clientHeight : this.dimensions.limit[this.isHorizontal ? "x" : "y"];
  }
  get isHorizontal() {
    return "horizontal" === this.options.orientation;
  }
  get actualScroll() {
    return this.isHorizontal ? this.rootElement.scrollLeft : this.rootElement.scrollTop;
  }
  get scroll() {
    return this.options.infinite ? function modulo(t2, i2) {
      return (t2 % i2 + i2) % i2;
    }(this.animatedScroll, this.limit) : this.animatedScroll;
  }
  get progress() {
    return 0 === this.limit ? 1 : this.scroll / this.limit;
  }
  get isScrolling() {
    return this.__isScrolling;
  }
  set isScrolling(t2) {
    this.__isScrolling !== t2 && (this.__isScrolling = t2, this.updateClassName());
  }
  get isStopped() {
    return this.__isStopped;
  }
  set isStopped(t2) {
    this.__isStopped !== t2 && (this.__isStopped = t2, this.updateClassName());
  }
  get isLocked() {
    return this.__isLocked;
  }
  set isLocked(t2) {
    this.__isLocked !== t2 && (this.__isLocked = t2, this.updateClassName());
  }
  get isSmooth() {
    return "smooth" === this.isScrolling;
  }
  get className() {
    let t2 = "lenis";
    return this.isStopped && (t2 += " lenis-stopped"), this.isLocked && (t2 += " lenis-locked"), this.isScrolling && (t2 += " lenis-scrolling"), "smooth" === this.isScrolling && (t2 += " lenis-smooth"), t2;
  }
  updateClassName() {
    this.cleanUpClassName(), this.rootElement.className = `${this.rootElement.className} ${this.className}`.trim();
  }
  cleanUpClassName() {
    this.rootElement.className = this.rootElement.className.replace(/lenis(-\w+)?/g, "").trim();
  }
};

// node_modules/locomotive-scroll/dist/locomotive-scroll.mjs
function e(t2, e2) {
  (null == e2 || e2 > t2.length) && (e2 = t2.length);
  for (var s2 = 0, i2 = Array(e2); s2 < e2; s2++)
    i2[s2] = t2[s2];
  return i2;
}
function s(t2, s2) {
  var i2 = "undefined" != typeof Symbol && t2[Symbol.iterator] || t2["@@iterator"];
  if (i2)
    return (i2 = i2.call(t2)).next.bind(i2);
  if (Array.isArray(t2) || (i2 = function(t3, s3) {
    if (t3) {
      if ("string" == typeof t3)
        return e(t3, s3);
      var i3 = {}.toString.call(t3).slice(8, -1);
      return "Object" === i3 && t3.constructor && (i3 = t3.constructor.name), "Map" === i3 || "Set" === i3 ? Array.from(t3) : "Arguments" === i3 || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i3) ? e(t3, s3) : void 0;
    }
  }(t2)) || s2 && t2 && "number" == typeof t2.length) {
    i2 && (t2 = i2);
    var r2 = 0;
    return function() {
      return r2 >= t2.length ? { done: true } : { done: false, value: t2[r2++] };
    };
  }
  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function i() {
  return i = Object.assign ? Object.assign.bind() : function(t2) {
    for (var e2 = 1; e2 < arguments.length; e2++) {
      var s2 = arguments[e2];
      for (var i2 in s2)
        ({}).hasOwnProperty.call(s2, i2) && (t2[i2] = s2[i2]);
    }
    return t2;
  }, i.apply(null, arguments);
}
var r = function() {
  function t2(t3) {
    var e3 = t3.scrollElements, s2 = t3.rootMargin, i2 = void 0 === s2 ? "-1px -1px -1px -1px" : s2, r2 = t3.IORaf;
    this.scrollElements = void 0, this.rootMargin = void 0, this.IORaf = void 0, this.observer = void 0, this.scrollElements = e3, this.rootMargin = i2, this.IORaf = r2, this._init();
  }
  var e2 = t2.prototype;
  return e2._init = function() {
    var t3 = this;
    this.observer = new IntersectionObserver(function(e4) {
      e4.forEach(function(e5) {
        var s2 = t3.scrollElements.find(function(t4) {
          return t4.$el === e5.target;
        });
        e5.isIntersecting ? (s2 && (s2.isAlreadyIntersected = true), t3._setInview(e5)) : s2 && s2.isAlreadyIntersected && t3._setOutOfView(e5);
      });
    }, { rootMargin: this.rootMargin });
    for (var e3, i2 = s(this.scrollElements); !(e3 = i2()).done; )
      this.observe(e3.value.$el);
  }, e2.destroy = function() {
    this.observer.disconnect();
  }, e2.observe = function(t3) {
    t3 && this.observer.observe(t3);
  }, e2.unobserve = function(t3) {
    t3 && this.observer.unobserve(t3);
  }, e2._setInview = function(t3) {
    var e3 = this.scrollElements.find(function(e4) {
      return e4.$el === t3.target;
    });
    this.IORaf && (null == e3 || e3.setInteractivityOn()), !this.IORaf && (null == e3 || e3.setInview());
  }, e2._setOutOfView = function(t3) {
    var e3 = this.scrollElements.find(function(e4) {
      return e4.$el === t3.target;
    });
    this.IORaf && (null == e3 || e3.setInteractivityOff()), !this.IORaf && (null == e3 || e3.setOutOfView()), null != e3 && e3.attributes.scrollRepeat || this.IORaf || this.unobserve(t3.target);
  }, t2;
}();
function n(t2, e2, s2, i2, r2) {
  return s2 + ((r2 - t2) / (e2 - t2) * (i2 - s2) || 0);
}
function o(t2, e2) {
  return t2.reduce(function(t3, s2) {
    return Math.abs(s2 - e2) < Math.abs(t3 - e2) ? s2 : t3;
  });
}
var l = function() {
  function t2(t3) {
    var e3, s2, i2, r2, n2, o2 = t3.$el, l2 = t3.id, a2 = t3.modularInstance, c2 = t3.subscribeElementUpdateFn, h2 = t3.unsubscribeElementUpdateFn, u2 = t3.needRaf, d = t3.scrollOrientation;
    this.$el = void 0, this.id = void 0, this.needRaf = void 0, this.attributes = void 0, this.scrollOrientation = void 0, this.isAlreadyIntersected = void 0, this.intersection = void 0, this.metrics = void 0, this.currentScroll = void 0, this.translateValue = void 0, this.progress = void 0, this.lastProgress = void 0, this.modularInstance = void 0, this.progressModularModules = void 0, this.isInview = void 0, this.isInteractive = void 0, this.isInFold = void 0, this.isFirstResize = void 0, this.subscribeElementUpdateFn = void 0, this.unsubscribeElementUpdateFn = void 0, this.$el = o2, this.id = l2, this.needRaf = u2, this.scrollOrientation = d, this.modularInstance = a2, this.subscribeElementUpdateFn = c2, this.unsubscribeElementUpdateFn = h2, this.attributes = { scrollClass: null != (e3 = this.$el.dataset.scrollClass) ? e3 : "is-inview", scrollOffset: null != (s2 = this.$el.dataset.scrollOffset) ? s2 : "0,0", scrollPosition: null != (i2 = this.$el.dataset.scrollPosition) ? i2 : "start,end", scrollModuleProgress: null != this.$el.dataset.scrollModuleProgress, scrollCssProgress: null != this.$el.dataset.scrollCssProgress, scrollEventProgress: null != (r2 = this.$el.dataset.scrollEventProgress) ? r2 : null, scrollSpeed: null != this.$el.dataset.scrollSpeed ? parseFloat(this.$el.dataset.scrollSpeed) : null, scrollRepeat: null != this.$el.dataset.scrollRepeat, scrollCall: null != (n2 = this.$el.dataset.scrollCall) ? n2 : null, scrollCallSelf: null != this.$el.dataset.scrollCallSelf, scrollIgnoreFold: null != this.$el.dataset.scrollIgnoreFold, scrollEnableTouchSpeed: null != this.$el.dataset.scrollEnableTouchSpeed }, this.intersection = { start: 0, end: 0 }, this.metrics = { offsetStart: 0, offsetEnd: 0, bcr: {} }, this.currentScroll = "vertical" === this.scrollOrientation ? window.scrollY : window.scrollX, this.translateValue = 0, this.progress = 0, this.lastProgress = null, this.progressModularModules = [], this.isInview = false, this.isInteractive = false, this.isAlreadyIntersected = false, this.isInFold = false, this.isFirstResize = true, this._init();
  }
  var e2 = t2.prototype;
  return e2._init = function() {
    this.needRaf && (this.modularInstance && this.attributes.scrollModuleProgress && this._getProgressModularModules(), this._resize());
  }, e2.onResize = function(t3) {
    this.currentScroll = t3.currentScroll, this._resize();
  }, e2.onRender = function(t3) {
    var e3 = t3.smooth, s2 = "vertical" === this.scrollOrientation ? window.innerHeight : window.innerWidth;
    if (this.currentScroll = t3.currentScroll, this._computeProgress(), this.attributes.scrollSpeed && !isNaN(this.attributes.scrollSpeed))
      if (this.attributes.scrollEnableTouchSpeed || e3) {
        if (this.isInFold) {
          var i2 = Math.max(0, this.progress);
          this.translateValue = i2 * s2 * this.attributes.scrollSpeed * -1;
        } else {
          var r2 = n(0, 1, -1, 1, this.progress);
          this.translateValue = r2 * s2 * this.attributes.scrollSpeed * -1;
        }
        this.$el.style.transform = "vertical" === this.scrollOrientation ? "translate3d(0, " + this.translateValue + "px, 0)" : "translate3d(" + this.translateValue + "px, 0, 0)";
      } else
        this.translateValue && (this.$el.style.transform = "translate3d(0, 0, 0)"), this.translateValue = 0;
  }, e2.setInview = function() {
    if (!this.isInview) {
      this.isInview = true, this.$el.classList.add(this.attributes.scrollClass);
      var t3 = this._getScrollCallFrom();
      this.attributes.scrollCall && this._dispatchCall("enter", t3);
    }
  }, e2.setOutOfView = function() {
    if (this.isInview && this.attributes.scrollRepeat) {
      this.isInview = false, this.$el.classList.remove(this.attributes.scrollClass);
      var t3 = this._getScrollCallFrom();
      this.attributes.scrollCall && this._dispatchCall("leave", t3);
    }
  }, e2.setInteractivityOn = function() {
    this.isInteractive || (this.isInteractive = true, this.subscribeElementUpdateFn(this));
  }, e2.setInteractivityOff = function() {
    this.isInteractive && (this.isInteractive = false, this.unsubscribeElementUpdateFn(this), null != this.lastProgress && this._computeProgress(o([0, 1], this.lastProgress)));
  }, e2._resize = function() {
    this.metrics.bcr = this.$el.getBoundingClientRect(), this._computeMetrics(), this._computeIntersection(), this.isFirstResize && (this.isFirstResize = false, this.isInFold && this.setInview());
  }, e2._computeMetrics = function() {
    var t3 = this.metrics.bcr, e3 = "vertical" === this.scrollOrientation ? window.innerHeight : window.innerWidth, s2 = "vertical" === this.scrollOrientation ? t3.height : t3.width;
    this.metrics.offsetStart = this.currentScroll + ("vertical" === this.scrollOrientation ? t3.top : t3.left) - this.translateValue, this.metrics.offsetEnd = this.metrics.offsetStart + s2, this.isInFold = this.metrics.offsetStart < e3 && !this.attributes.scrollIgnoreFold;
  }, e2._computeIntersection = function() {
    var t3 = "vertical" === this.scrollOrientation ? window.innerHeight : window.innerWidth, e3 = "vertical" === this.scrollOrientation ? this.metrics.bcr.height : this.metrics.bcr.width, s2 = this.attributes.scrollOffset.split(","), i2 = null != s2[0] ? s2[0].trim() : "0", r2 = null != s2[1] ? s2[1].trim() : "0", n2 = this.attributes.scrollPosition.split(","), o2 = null != n2[0] ? n2[0].trim() : "start", l2 = null != n2[1] ? n2[1].trim() : "end", a2 = i2.includes("%") ? t3 * parseInt(i2.replace("%", "").trim()) * 0.01 : parseInt(i2), c2 = r2.includes("%") ? t3 * parseInt(r2.replace("%", "").trim()) * 0.01 : parseInt(r2);
    switch (this.isInFold && (o2 = "fold"), o2) {
      case "start":
      default:
        this.intersection.start = this.metrics.offsetStart - t3 + a2;
        break;
      case "middle":
        this.intersection.start = this.metrics.offsetStart - t3 + a2 + 0.5 * e3;
        break;
      case "end":
        this.intersection.start = this.metrics.offsetStart - t3 + a2 + e3;
        break;
      case "fold":
        this.intersection.start = 0;
    }
    switch (l2) {
      case "start":
        this.intersection.end = this.metrics.offsetStart - c2;
        break;
      case "middle":
        this.intersection.end = this.metrics.offsetStart - c2 + 0.5 * e3;
        break;
      default:
        this.intersection.end = this.metrics.offsetStart - c2 + e3;
    }
    if (this.intersection.end <= this.intersection.start)
      switch (l2) {
        case "start":
        default:
          this.intersection.end = this.intersection.start + 1;
          break;
        case "middle":
          this.intersection.end = this.intersection.start + 0.5 * e3;
          break;
        case "end":
          this.intersection.end = this.intersection.start + e3;
      }
  }, e2._computeProgress = function(t3) {
    var e3, i2 = null != t3 ? t3 : (e3 = n(this.intersection.start, this.intersection.end, 0, 1, this.currentScroll)) < 0 ? 0 : e3 > 1 ? 1 : e3;
    if (this.progress = i2, i2 != this.lastProgress) {
      if (this.lastProgress = i2, this.attributes.scrollCssProgress && this._setCssProgress(i2), this.attributes.scrollEventProgress && this._setCustomEventProgress(i2), this.attributes.scrollModuleProgress)
        for (var r2, o2 = s(this.progressModularModules); !(r2 = o2()).done; ) {
          var l2 = r2.value;
          this.modularInstance && this.modularInstance.call("onScrollProgress", i2, l2.moduleName, l2.moduleId);
        }
      i2 > 0 && i2 < 1 && this.setInview(), 0 === i2 && this.setOutOfView(), 1 === i2 && this.setOutOfView();
    }
  }, e2._setCssProgress = function(t3) {
    void 0 === t3 && (t3 = 0), this.$el.style.setProperty("--progress", t3.toString());
  }, e2._setCustomEventProgress = function(t3) {
    void 0 === t3 && (t3 = 0);
    var e3 = this.attributes.scrollEventProgress;
    if (e3) {
      var s2 = new CustomEvent(e3, { detail: { target: this.$el, progress: t3 } });
      window.dispatchEvent(s2);
    }
  }, e2._getProgressModularModules = function() {
    if (this.modularInstance) {
      var t3 = Object.keys(this.$el.dataset).filter(function(t4) {
        return t4.includes("module");
      }), e3 = Object.entries(this.modularInstance.modules);
      if (t3.length)
        for (var i2, r2 = s(t3); !(i2 = r2()).done; ) {
          var n2 = this.$el.dataset[i2.value];
          if (!n2)
            return;
          for (var o2, l2 = s(e3); !(o2 = l2()).done; ) {
            var a2 = o2.value;
            n2 in a2[1] && this.progressModularModules.push({ moduleName: a2[0], moduleId: n2 });
          }
        }
    }
  }, e2._getScrollCallFrom = function() {
    var t3 = o([this.intersection.start, this.intersection.end], this.currentScroll);
    return this.intersection.start === t3 ? "start" : "end";
  }, e2._dispatchCall = function(t3, e3) {
    var s2, i2, r2 = null == (s2 = this.attributes.scrollCall) ? void 0 : s2.split(","), n2 = null == (i2 = this.attributes) ? void 0 : i2.scrollCallSelf;
    if (r2 && r2.length > 1) {
      var o2, l2, a2 = r2[0], c2 = r2[1], h2 = r2[2];
      l2 = n2 ? this.$el.dataset["module" + c2.trim()] : h2, this.modularInstance && this.modularInstance.call(a2.trim(), { target: this.$el, way: t3, from: e3 }, c2.trim(), null == (o2 = l2) ? void 0 : o2.trim());
    } else if (r2) {
      var u2 = new CustomEvent(r2[0], { detail: { target: this.$el, way: t3, from: e3 } });
      window.dispatchEvent(u2);
    }
  }, t2;
}();
var a = ["scrollOffset", "scrollPosition", "scrollModuleProgress", "scrollCssProgress", "scrollEventProgress", "scrollSpeed"];
var c = function() {
  function t2(t3) {
    var e3 = t3.$el, s2 = t3.modularInstance, i2 = t3.triggerRootMargin, r2 = t3.rafRootMargin, n2 = t3.scrollOrientation;
    this.$scrollContainer = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.scrollElements = void 0, this.triggeredScrollElements = void 0, this.RAFScrollElements = void 0, this.scrollElementsToUpdate = void 0, this.IOTriggerInstance = void 0, this.IORafInstance = void 0, this.scrollOrientation = void 0, e3 ? (this.$scrollContainer = e3, this.modularInstance = s2, this.scrollOrientation = n2, this.triggerRootMargin = null != i2 ? i2 : "-1px -1px -1px -1px", this.rafRootMargin = null != r2 ? r2 : "100% 100% 100% 100%", this.scrollElements = [], this.triggeredScrollElements = [], this.RAFScrollElements = [], this.scrollElementsToUpdate = [], this._init()) : console.error("Please provide a DOM Element as scrollContainer");
  }
  var e2 = t2.prototype;
  return e2._init = function() {
    var t3 = this.$scrollContainer.querySelectorAll("[data-scroll]"), e3 = Array.from(t3);
    this._subscribeScrollElements(e3), this.IOTriggerInstance = new r({ scrollElements: [].concat(this.triggeredScrollElements), rootMargin: this.triggerRootMargin, IORaf: false }), this.IORafInstance = new r({ scrollElements: [].concat(this.RAFScrollElements), rootMargin: this.rafRootMargin, IORaf: true });
  }, e2.destroy = function() {
    this.IOTriggerInstance.destroy(), this.IORafInstance.destroy(), this._unsubscribeAllScrollElements();
  }, e2.onResize = function(t3) {
    for (var e3, i2 = t3.currentScroll, r2 = s(this.RAFScrollElements); !(e3 = r2()).done; )
      e3.value.onResize({ currentScroll: i2 });
  }, e2.onRender = function(t3) {
    for (var e3, i2 = t3.currentScroll, r2 = t3.smooth, n2 = s(this.scrollElementsToUpdate); !(e3 = n2()).done; )
      e3.value.onRender({ currentScroll: i2, smooth: r2 });
  }, e2.removeScrollElements = function(t3) {
    var e3 = this, s2 = t3.querySelectorAll("[data-scroll]");
    if (s2.length) {
      for (var i2 = 0; i2 < this.triggeredScrollElements.length; i2++) {
        var r2 = this.triggeredScrollElements[i2];
        Array.from(s2).indexOf(r2.$el) > -1 && (this.IOTriggerInstance.unobserve(r2.$el), this.triggeredScrollElements.splice(i2, 1));
      }
      for (var n2 = 0; n2 < this.RAFScrollElements.length; n2++) {
        var o2 = this.RAFScrollElements[n2];
        Array.from(s2).indexOf(o2.$el) > -1 && (this.IORafInstance.unobserve(o2.$el), this.RAFScrollElements.splice(n2, 1));
      }
      s2.forEach(function(t4) {
        var s3 = e3.scrollElementsToUpdate.find(function(e4) {
          return e4.$el === t4;
        }), i3 = e3.scrollElements.find(function(e4) {
          return e4.$el === t4;
        });
        s3 && e3._unsubscribeElementUpdate(s3), i3 && (e3.scrollElements = e3.scrollElements.filter(function(t5) {
          return t5.id != i3.id;
        }));
      });
    }
  }, e2.addScrollElements = function(t3) {
    var e3 = t3.querySelectorAll("[data-scroll]"), s2 = [];
    this.scrollElements.forEach(function(t4) {
      s2.push(t4.id);
    });
    var i2 = Math.max.apply(Math, s2.concat([0])) + 1, r2 = Array.from(e3);
    this._subscribeScrollElements(r2, i2, true);
  }, e2._subscribeScrollElements = function(t3, e3, s2) {
    void 0 === e3 && (e3 = 0), void 0 === s2 && (s2 = false);
    for (var i2 = 0; i2 < t3.length; i2++) {
      var r2 = t3[i2], n2 = this._checkRafNeeded(r2), o2 = new l({ $el: r2, id: e3 + i2, scrollOrientation: this.scrollOrientation, modularInstance: this.modularInstance, subscribeElementUpdateFn: this._subscribeElementUpdate.bind(this), unsubscribeElementUpdateFn: this._unsubscribeElementUpdate.bind(this), needRaf: n2 });
      this.scrollElements.push(o2), n2 ? (this.RAFScrollElements.push(o2), s2 && (this.IORafInstance.scrollElements.push(o2), this.IORafInstance.observe(o2.$el))) : (this.triggeredScrollElements.push(o2), s2 && (this.IOTriggerInstance.scrollElements.push(o2), this.IOTriggerInstance.observe(o2.$el)));
    }
  }, e2._unsubscribeAllScrollElements = function() {
    this.scrollElements = [], this.RAFScrollElements = [], this.triggeredScrollElements = [], this.scrollElementsToUpdate = [];
  }, e2._subscribeElementUpdate = function(t3) {
    this.scrollElementsToUpdate.push(t3);
  }, e2._unsubscribeElementUpdate = function(t3) {
    this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(function(e3) {
      return e3.id != t3.id;
    });
  }, e2._checkRafNeeded = function(t3) {
    var e3 = [].concat(a), i2 = function(t4) {
      e3 = e3.filter(function(e4) {
        return e4 != t4;
      });
    };
    if (t3.dataset.scrollOffset) {
      if ("0,0" != t3.dataset.scrollOffset.split(",").map(function(t4) {
        return t4.replace("%", "").trim();
      }).join(","))
        return true;
      i2("scrollOffset");
    } else
      i2("scrollOffset");
    if (t3.dataset.scrollPosition) {
      if ("top,bottom" != t3.dataset.scrollPosition.trim())
        return true;
      i2("scrollPosition");
    } else
      i2("scrollPosition");
    if (t3.dataset.scrollSpeed && !isNaN(parseFloat(t3.dataset.scrollSpeed)))
      return true;
    i2("scrollSpeed");
    for (var r2, n2 = s(e3); !(r2 = n2()).done; )
      if (r2.value in t3.dataset)
        return true;
    return false;
  }, t2;
}();
var h = function() {
  function t2(t3) {
    var e3 = t3.resizeElements, s2 = t3.resizeCallback, i2 = void 0 === s2 ? function() {
    } : s2;
    this.$resizeElements = void 0, this.isFirstObserve = void 0, this.observer = void 0, this.resizeCallback = void 0, this.$resizeElements = e3, this.resizeCallback = i2, this.isFirstObserve = true, this._init();
  }
  var e2 = t2.prototype;
  return e2._init = function() {
    var t3 = this;
    this.observer = new ResizeObserver(function(e4) {
      !t3.isFirstObserve && (null == t3.resizeCallback || t3.resizeCallback()), t3.isFirstObserve = false;
    });
    for (var e3, i2 = s(this.$resizeElements); !(e3 = i2()).done; )
      this.observer.observe(e3.value);
  }, e2.destroy = function() {
    this.observer.disconnect();
  }, t2;
}();
var u = function() {
  function e2(t2) {
    var e3 = void 0 === t2 ? {} : t2, s3 = e3.lenisOptions, i2 = void 0 === s3 ? {} : s3, r2 = e3.modularInstance, n2 = e3.triggerRootMargin, o2 = e3.rafRootMargin, l2 = e3.autoResize, a2 = void 0 === l2 || l2, c2 = e3.autoStart, h2 = void 0 === c2 || c2, u2 = e3.scrollCallback, d = void 0 === u2 ? function() {
    } : u2, f = e3.initCustomTicker, v = e3.destroyCustomTicker;
    this.rafPlaying = void 0, this.lenisInstance = void 0, this.coreInstance = void 0, this.lenisOptions = void 0, this.modularInstance = void 0, this.triggerRootMargin = void 0, this.rafRootMargin = void 0, this.rafInstance = void 0, this.autoResize = void 0, this.autoStart = void 0, this.ROInstance = void 0, this.initCustomTicker = void 0, this.destroyCustomTicker = void 0, this._onRenderBind = void 0, this._onResizeBind = void 0, this._onScrollToBind = void 0;
    for (var m = 0, g = Object.entries(i2); m < g.length; m++) {
      var b = g[m][0];
      ["wrapper", "content", "infinite"].includes(b) && console.warn('Warning: Key "' + b + '" is not possible to edit in Locomotive Scroll.');
    }
    Object.assign(this, { lenisOptions: i2, modularInstance: r2, triggerRootMargin: n2, rafRootMargin: o2, autoResize: a2, autoStart: h2, scrollCallback: d, initCustomTicker: f, destroyCustomTicker: v }), this._onRenderBind = this._onRender.bind(this), this._onScrollToBind = this._onScrollTo.bind(this), this._onResizeBind = this._onResize.bind(this), this.rafPlaying = false, this._init();
  }
  var s2 = e2.prototype;
  return s2._init = function() {
    var e3, s3 = this;
    this.lenisInstance = new Lenis(i({}, this.lenisOptions, { wrapper: window, content: document.documentElement, infinite: false })), null == (e3 = this.lenisInstance) || e3.on("scroll", this.scrollCallback), document.documentElement.setAttribute("data-scroll-orientation", this.lenisInstance.options.orientation), requestAnimationFrame(function() {
      s3.coreInstance = new c({ $el: s3.lenisInstance.rootElement, modularInstance: s3.modularInstance, triggerRootMargin: s3.triggerRootMargin, rafRootMargin: s3.rafRootMargin, scrollOrientation: s3.lenisInstance.options.orientation }), s3._bindEvents(), s3.initCustomTicker && !s3.destroyCustomTicker ? console.warn("initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.") : !s3.initCustomTicker && s3.destroyCustomTicker && console.warn("destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble."), s3.autoStart && s3.start();
    });
  }, s2.destroy = function() {
    var t2, e3 = this;
    this.stop(), this._unbindEvents(), this.lenisInstance.destroy(), null == (t2 = this.coreInstance) || t2.destroy(), requestAnimationFrame(function() {
      var t3;
      null == (t3 = e3.coreInstance) || t3.destroy();
    });
  }, s2._bindEvents = function() {
    this._bindScrollToEvents(), this.autoResize && ("ResizeObserver" in window ? this.ROInstance = new h({ resizeElements: [document.body], resizeCallback: this._onResizeBind }) : window.addEventListener("resize", this._onResizeBind));
  }, s2._unbindEvents = function() {
    this._unbindScrollToEvents(), this.autoResize && ("ResizeObserver" in window ? this.ROInstance && this.ROInstance.destroy() : window.removeEventListener("resize", this._onResizeBind));
  }, s2._bindScrollToEvents = function(t2) {
    var e3 = this, s3 = t2 || this.lenisInstance.rootElement, i2 = null == s3 ? void 0 : s3.querySelectorAll("[data-scroll-to]");
    (null == i2 ? void 0 : i2.length) && i2.forEach(function(t3) {
      t3.addEventListener("click", e3._onScrollToBind, false);
    });
  }, s2._unbindScrollToEvents = function(t2) {
    var e3 = this, s3 = t2 || this.lenisInstance.rootElement, i2 = null == s3 ? void 0 : s3.querySelectorAll("[data-scroll-to]");
    (null == i2 ? void 0 : i2.length) && i2.forEach(function(t3) {
      t3.removeEventListener("click", e3._onScrollToBind, false);
    });
  }, s2._onResize = function() {
    var t2 = this;
    requestAnimationFrame(function() {
      var e3;
      null == (e3 = t2.coreInstance) || e3.onResize({ currentScroll: t2.lenisInstance.scroll });
    });
  }, s2._onRender = function() {
    var t2, e3;
    null == (t2 = this.lenisInstance) || t2.raf(Date.now()), null == (e3 = this.coreInstance) || e3.onRender({ currentScroll: this.lenisInstance.scroll, smooth: this.lenisInstance.options.smoothWheel });
  }, s2._onScrollTo = function(t2) {
    var e3;
    t2.preventDefault();
    var s3 = null != (e3 = t2.currentTarget) ? e3 : null;
    if (s3) {
      var i2 = s3.getAttribute("data-scroll-to-href") || s3.getAttribute("href"), r2 = s3.getAttribute("data-scroll-to-offset") || 0, n2 = s3.getAttribute("data-scroll-to-duration") || this.lenisInstance.options.duration;
      i2 && this.scrollTo(i2, { offset: "string" == typeof r2 ? parseInt(r2) : r2, duration: "string" == typeof n2 ? parseInt(n2) : n2 });
    }
  }, s2.start = function() {
    var t2;
    this.rafPlaying || (null == (t2 = this.lenisInstance) || t2.start(), this.rafPlaying = true, this.initCustomTicker ? this.initCustomTicker(this._onRenderBind) : this._raf());
  }, s2.stop = function() {
    var t2;
    this.rafPlaying && (null == (t2 = this.lenisInstance) || t2.stop(), this.rafPlaying = false, this.destroyCustomTicker ? this.destroyCustomTicker(this._onRenderBind) : this.rafInstance && cancelAnimationFrame(this.rafInstance));
  }, s2.removeScrollElements = function(t2) {
    var e3;
    t2 ? (this._unbindScrollToEvents(t2), null == (e3 = this.coreInstance) || e3.removeScrollElements(t2)) : console.error("Please provide a DOM Element as $oldContainer");
  }, s2.addScrollElements = function(t2) {
    var e3, s3 = this;
    t2 ? (null == (e3 = this.coreInstance) || e3.addScrollElements(t2), requestAnimationFrame(function() {
      s3._bindScrollToEvents(t2);
    })) : console.error("Please provide a DOM Element as $newContainer");
  }, s2.resize = function() {
    this._onResizeBind();
  }, s2.scrollTo = function(t2, e3) {
    var s3;
    null == (s3 = this.lenisInstance) || s3.scrollTo(t2, { offset: null == e3 ? void 0 : e3.offset, lerp: null == e3 ? void 0 : e3.lerp, duration: null == e3 ? void 0 : e3.duration, immediate: null == e3 ? void 0 : e3.immediate, lock: null == e3 ? void 0 : e3.lock, force: null == e3 ? void 0 : e3.force, easing: null == e3 ? void 0 : e3.easing, onComplete: null == e3 ? void 0 : e3.onComplete });
  }, s2._raf = function() {
    var t2 = this;
    this._onRenderBind(), this.rafInstance = requestAnimationFrame(function() {
      return t2._raf();
    });
  }, e2;
}();

// dep:locomotive-scroll
var locomotive_scroll_default = u;
export {
  locomotive_scroll_default as default
};
//# sourceMappingURL=locomotive-scroll.js.map
